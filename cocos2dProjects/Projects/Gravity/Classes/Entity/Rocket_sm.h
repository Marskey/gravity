//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Rocket.sm
//

#ifndef ROCKET_SM_H
#define ROCKET_SM_H


#define SMC_USES_IOSTREAMS

#include <Entity/statemap.h>

// Forward declarations.
class RocketMap;
class RocketMap_ORBIT;
class RocketMap_BOOST;
class RocketMap_SEPARATE;
class RocketMap_NAVIGATE;
class RocketMap_Injection;
class RocketMap_RUNNINGOUT;
class RocketMap_DEAD;
class RocketMap_Default;
class RocketState;
class RocketContext;
class Rocket;

class RocketState :
    public statemap::State
{
public:

    RocketState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(RocketContext&) {};
    virtual void Exit(RocketContext&) {};

    virtual void fsmBoost(RocketContext& context);
    virtual void fsmDead(RocketContext& context);
    virtual void fsmInjection(RocketContext& context);
    virtual void fsmNavigate(RocketContext& context);
    virtual void fsmOrbit(RocketContext& context);
    virtual void fsmRunningOut(RocketContext& context);
    virtual void fsmSeparate(RocketContext& context);

protected:

    virtual void Default(RocketContext& context);
};

class RocketMap
{
public:

    static RocketMap_ORBIT ORBIT;
    static RocketMap_BOOST BOOST;
    static RocketMap_SEPARATE SEPARATE;
    static RocketMap_NAVIGATE NAVIGATE;
    static RocketMap_Injection Injection;
    static RocketMap_RUNNINGOUT RUNNINGOUT;
    static RocketMap_DEAD DEAD;
};

class RocketMap_Default :
    public RocketState
{
public:

    RocketMap_Default(const char * const name, const int stateId)
    : RocketState(name, stateId)
    {};

};

class RocketMap_ORBIT :
    public RocketMap_Default
{
public:
    RocketMap_ORBIT(const char * const name, const int stateId)
    : RocketMap_Default(name, stateId)
    {};

    virtual void Entry(RocketContext&);
    virtual void Exit(RocketContext&);
    virtual void fsmBoost(RocketContext& context);
};

class RocketMap_BOOST :
    public RocketMap_Default
{
public:
    RocketMap_BOOST(const char * const name, const int stateId)
    : RocketMap_Default(name, stateId)
    {};

    virtual void Entry(RocketContext&);
    virtual void Exit(RocketContext&);
    virtual void fsmOrbit(RocketContext& context);
    virtual void fsmRunningOut(RocketContext& context);
    virtual void fsmSeparate(RocketContext& context);
};

class RocketMap_SEPARATE :
    public RocketMap_Default
{
public:
    RocketMap_SEPARATE(const char * const name, const int stateId)
    : RocketMap_Default(name, stateId)
    {};

    virtual void Entry(RocketContext&);
    virtual void Exit(RocketContext&);
    virtual void fsmNavigate(RocketContext& context);
};

class RocketMap_NAVIGATE :
    public RocketMap_Default
{
public:
    RocketMap_NAVIGATE(const char * const name, const int stateId)
    : RocketMap_Default(name, stateId)
    {};

    virtual void Entry(RocketContext&);
    virtual void Exit(RocketContext&);
    virtual void fsmInjection(RocketContext& context);
};

class RocketMap_Injection :
    public RocketMap_Default
{
public:
    RocketMap_Injection(const char * const name, const int stateId)
    : RocketMap_Default(name, stateId)
    {};

    virtual void Entry(RocketContext&);
    virtual void Exit(RocketContext&);
    virtual void fsmDead(RocketContext& context);
    virtual void fsmOrbit(RocketContext& context);
};

class RocketMap_RUNNINGOUT :
    public RocketMap_Default
{
public:
    RocketMap_RUNNINGOUT(const char * const name, const int stateId)
    : RocketMap_Default(name, stateId)
    {};

    virtual void Entry(RocketContext&);
    virtual void Exit(RocketContext&);
    virtual void fsmDead(RocketContext& context);
};

class RocketMap_DEAD :
    public RocketMap_Default
{
public:
    RocketMap_DEAD(const char * const name, const int stateId)
    : RocketMap_Default(name, stateId)
    {};

    virtual void Entry(RocketContext&);
    virtual void Exit(RocketContext&);
};

class RocketContext :
    public statemap::FSMContext
{
public:

    explicit RocketContext(Rocket& owner)
    : FSMContext(RocketMap::NAVIGATE),
      _owner(&owner)
    {};

    RocketContext(Rocket& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(&owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
    }

    inline Rocket& getOwner()
    {
        return *_owner;
    };

    inline RocketState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<RocketState&>(*_state);
    };

    inline void fsmBoost()
    {
        getState().fsmBoost(*this);
    };

    inline void fsmDead()
    {
        getState().fsmDead(*this);
    };

    inline void fsmInjection()
    {
        getState().fsmInjection(*this);
    };

    inline void fsmNavigate()
    {
        getState().fsmNavigate(*this);
    };

    inline void fsmOrbit()
    {
        getState().fsmOrbit(*this);
    };

    inline void fsmRunningOut()
    {
        getState().fsmRunningOut(*this);
    };

    inline void fsmSeparate()
    {
        getState().fsmSeparate(*this);
    };

private:

    Rocket* _owner;
};


#endif // ROCKET_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
