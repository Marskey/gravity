//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Rocket.sm
//

#include "Rocket.h"
#include "Rocket_sm.h"

using namespace statemap;

// Static class declarations.
RocketMap_ORBIT RocketMap::ORBIT("RocketMap::ORBIT", 0);
RocketMap_BOOST RocketMap::BOOST("RocketMap::BOOST", 1);
RocketMap_SEPARATE RocketMap::SEPARATE("RocketMap::SEPARATE", 2);
RocketMap_NAVIGATE RocketMap::NAVIGATE("RocketMap::NAVIGATE", 3);
RocketMap_Injection RocketMap::Injection("RocketMap::Injection", 4);
RocketMap_RUNNINGOUT RocketMap::RUNNINGOUT("RocketMap::RUNNINGOUT", 5);
RocketMap_DEAD RocketMap::DEAD("RocketMap::DEAD", 6);

void RocketState::fsmBoost(RocketContext& context)
{
    Default(context);
}

void RocketState::fsmDead(RocketContext& context)
{
    Default(context);
}

void RocketState::fsmInjection(RocketContext& context)
{
    Default(context);
}

void RocketState::fsmNavigate(RocketContext& context)
{
    Default(context);
}

void RocketState::fsmOrbit(RocketContext& context)
{
    Default(context);
}

void RocketState::fsmRunningOut(RocketContext& context)
{
    Default(context);
}

void RocketState::fsmSeparate(RocketContext& context)
{
    Default(context);
}

void RocketState::Default(RocketContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void RocketMap_ORBIT::Entry(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.orbit();
}

void RocketMap_ORBIT::Exit(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.exit();
}

void RocketMap_ORBIT::fsmBoost(RocketContext& context)
{

    context.getState().Exit(context);
    context.setState(RocketMap::BOOST);
    context.getState().Entry(context);

}

void RocketMap_BOOST::Entry(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.boost();
}

void RocketMap_BOOST::Exit(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.exit();
}

void RocketMap_BOOST::fsmOrbit(RocketContext& context)
{

    context.getState().Exit(context);
    context.setState(RocketMap::ORBIT);
    context.getState().Entry(context);

}

void RocketMap_BOOST::fsmRunningOut(RocketContext& context)
{

    context.getState().Exit(context);
    context.setState(RocketMap::RUNNINGOUT);
    context.getState().Entry(context);

}

void RocketMap_BOOST::fsmSeparate(RocketContext& context)
{

    context.getState().Exit(context);
    context.setState(RocketMap::SEPARATE);
    context.getState().Entry(context);

}

void RocketMap_SEPARATE::Entry(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.separate();
}

void RocketMap_SEPARATE::Exit(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.exit();
}

void RocketMap_SEPARATE::fsmNavigate(RocketContext& context)
{

    context.getState().Exit(context);
    context.setState(RocketMap::NAVIGATE);
    context.getState().Entry(context);

}

void RocketMap_NAVIGATE::Entry(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.navigate();
}

void RocketMap_NAVIGATE::Exit(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.exit();
}

void RocketMap_NAVIGATE::fsmInjection(RocketContext& context)
{

    context.getState().Exit(context);
    context.setState(RocketMap::Injection);
    context.getState().Entry(context);

}

void RocketMap_Injection::Entry(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.injection();
}

void RocketMap_Injection::Exit(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.exit();
}

void RocketMap_Injection::fsmDead(RocketContext& context)
{

    context.getState().Exit(context);
    context.setState(RocketMap::DEAD);
    context.getState().Entry(context);

}

void RocketMap_Injection::fsmOrbit(RocketContext& context)
{

    context.getState().Exit(context);
    context.setState(RocketMap::ORBIT);
    context.getState().Entry(context);

}

void RocketMap_RUNNINGOUT::Entry(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.runningOut();
}

void RocketMap_RUNNINGOUT::Exit(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.exit();
}

void RocketMap_RUNNINGOUT::fsmDead(RocketContext& context)
{

    context.getState().Exit(context);
    context.setState(RocketMap::DEAD);
    context.getState().Entry(context);

}

void RocketMap_DEAD::Entry(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.dead();
}

void RocketMap_DEAD::Exit(RocketContext& context)

{
    Rocket& ctxt = context.getOwner();

    ctxt.exit();
}

//
// Local variables:
//  buffer-read-only: t
// End:
//
