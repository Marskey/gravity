//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Collection.sm
//

#ifndef COLLECTION_SM_H
#define COLLECTION_SM_H


#define SMC_USES_IOSTREAMS

#include <Entity\statemap.h>

// Forward declarations.
class CollectionMap;
class CollectionMap_ORBIT;
class CollectionMap_NAVIGATE;
class CollectionMap_INJECTION;
class CollectionMap_DEAD;
class CollectionMap_IDLE;
class CollectionMap_Default;
class CollectionState;
class CollectionContext;
class Collection;

class CollectionState :
    public statemap::State
{
public:

    CollectionState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(CollectionContext&) {};
    virtual void Exit(CollectionContext&) {};

    virtual void fsmDead(CollectionContext& context);
    virtual void fsmIdle(CollectionContext& context);
    virtual void fsmInjection(CollectionContext& context);
    virtual void fsmOrbit(CollectionContext& context);

protected:

    virtual void Default(CollectionContext& context);
};

class CollectionMap
{
public:

    static CollectionMap_ORBIT ORBIT;
    static CollectionMap_NAVIGATE NAVIGATE;
    static CollectionMap_INJECTION INJECTION;
    static CollectionMap_DEAD DEAD;
    static CollectionMap_IDLE IDLE;
};

class CollectionMap_Default :
    public CollectionState
{
public:

    CollectionMap_Default(const char * const name, const int stateId)
    : CollectionState(name, stateId)
    {};

};

class CollectionMap_ORBIT :
    public CollectionMap_Default
{
public:
    CollectionMap_ORBIT(const char * const name, const int stateId)
    : CollectionMap_Default(name, stateId)
    {};

    virtual void Entry(CollectionContext&);
    virtual void Exit(CollectionContext&);
    virtual void fsmDead(CollectionContext& context);
};

class CollectionMap_NAVIGATE :
    public CollectionMap_Default
{
public:
    CollectionMap_NAVIGATE(const char * const name, const int stateId)
    : CollectionMap_Default(name, stateId)
    {};

    virtual void Entry(CollectionContext&);
    virtual void Exit(CollectionContext&);
    virtual void fsmIdle(CollectionContext& context);
    virtual void fsmInjection(CollectionContext& context);
};

class CollectionMap_INJECTION :
    public CollectionMap_Default
{
public:
    CollectionMap_INJECTION(const char * const name, const int stateId)
    : CollectionMap_Default(name, stateId)
    {};

    virtual void Entry(CollectionContext&);
    virtual void Exit(CollectionContext&);
    virtual void fsmOrbit(CollectionContext& context);
};

class CollectionMap_DEAD :
    public CollectionMap_Default
{
public:
    CollectionMap_DEAD(const char * const name, const int stateId)
    : CollectionMap_Default(name, stateId)
    {};

    virtual void Entry(CollectionContext&);
    virtual void Exit(CollectionContext&);
};

class CollectionMap_IDLE :
    public CollectionMap_Default
{
public:
    CollectionMap_IDLE(const char * const name, const int stateId)
    : CollectionMap_Default(name, stateId)
    {};

    virtual void Entry(CollectionContext&);
    virtual void Exit(CollectionContext&);
    virtual void fsmDead(CollectionContext& context);
};

class CollectionContext :
    public statemap::FSMContext
{
public:

    explicit CollectionContext(Collection& owner)
    : FSMContext(CollectionMap::NAVIGATE),
      _owner(&owner)
    {};

    CollectionContext(Collection& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(&owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
    }

    inline Collection& getOwner()
    {
        return *_owner;
    };

    inline CollectionState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<CollectionState&>(*_state);
    };

    inline void fsmDead()
    {
        getState().fsmDead(*this);
    };

    inline void fsmIdle()
    {
        getState().fsmIdle(*this);
    };

    inline void fsmInjection()
    {
        getState().fsmInjection(*this);
    };

    inline void fsmOrbit()
    {
        getState().fsmOrbit(*this);
    };

private:

    Collection* _owner;
};


#endif // COLLECTION_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
