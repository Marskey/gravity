//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Collection.sm
//

#include "Collection.h"
#include "Collection_sm.h"

using namespace statemap;

// Static class declarations.
CollectionMap_ORBIT CollectionMap::ORBIT("CollectionMap::ORBIT", 0);
CollectionMap_NAVIGATE CollectionMap::NAVIGATE("CollectionMap::NAVIGATE", 1);
CollectionMap_INJECTION CollectionMap::INJECTION("CollectionMap::INJECTION", 2);
CollectionMap_DEAD CollectionMap::DEAD("CollectionMap::DEAD", 3);
CollectionMap_IDLE CollectionMap::IDLE("CollectionMap::IDLE", 4);

void CollectionState::fsmDead(CollectionContext& context)
{
    Default(context);
}

void CollectionState::fsmIdle(CollectionContext& context)
{
    Default(context);
}

void CollectionState::fsmInjection(CollectionContext& context)
{
    Default(context);
}

void CollectionState::fsmOrbit(CollectionContext& context)
{
    Default(context);
}

void CollectionState::Default(CollectionContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void CollectionMap_ORBIT::Entry(CollectionContext& context)

{
    Collection& ctxt = context.getOwner();

    ctxt.orbit();
}

void CollectionMap_ORBIT::Exit(CollectionContext& context)

{
    Collection& ctxt = context.getOwner();

    ctxt.exit();
}

void CollectionMap_ORBIT::fsmDead(CollectionContext& context)
{

    context.getState().Exit(context);
    context.setState(CollectionMap::DEAD);
    context.getState().Entry(context);

}

void CollectionMap_NAVIGATE::Entry(CollectionContext& context)

{
    Collection& ctxt = context.getOwner();

    ctxt.navigate();
}

void CollectionMap_NAVIGATE::Exit(CollectionContext& context)

{
    Collection& ctxt = context.getOwner();

    ctxt.exit();
}

void CollectionMap_NAVIGATE::fsmIdle(CollectionContext& context)
{

    context.getState().Exit(context);
    context.setState(CollectionMap::IDLE);
    context.getState().Entry(context);

}

void CollectionMap_NAVIGATE::fsmInjection(CollectionContext& context)
{

    context.getState().Exit(context);
    context.setState(CollectionMap::INJECTION);
    context.getState().Entry(context);

}

void CollectionMap_INJECTION::Entry(CollectionContext& context)

{
    Collection& ctxt = context.getOwner();

    ctxt.injection();
}

void CollectionMap_INJECTION::Exit(CollectionContext& context)

{
    Collection& ctxt = context.getOwner();

    ctxt.exit();
}

void CollectionMap_INJECTION::fsmOrbit(CollectionContext& context)
{

    context.getState().Exit(context);
    context.setState(CollectionMap::ORBIT);
    context.getState().Entry(context);

}

void CollectionMap_DEAD::Entry(CollectionContext& context)

{
    Collection& ctxt = context.getOwner();

    ctxt.dead();
}

void CollectionMap_DEAD::Exit(CollectionContext& context)

{
    Collection& ctxt = context.getOwner();

    ctxt.exit();
}

void CollectionMap_IDLE::Entry(CollectionContext& context)

{
    Collection& ctxt = context.getOwner();

    ctxt.idle();
}

void CollectionMap_IDLE::Exit(CollectionContext& context)

{
    Collection& ctxt = context.getOwner();

    ctxt.exit();
}

void CollectionMap_IDLE::fsmDead(CollectionContext& context)
{

    context.getState().Exit(context);
    context.setState(CollectionMap::DEAD);
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
